#AMD 64 ABI
这些内容翻译自:http://www.x86-64.org/documentation/abi.pdf
翻译时间2014-06-22

#Chapter 3
#Low Level System Information
##3.1 Machine Interface
###3.1.1 Processor Architecture
###3.1.2 Data Representation

####基础类型
Figure 3.1 展示了 ISO'C 和处理器之间的数据对应.

Type	|C	|sizeof	|Alignment	|AMD64 Architecture
-	|-	|-	|-		|-
Integral|char	|1	|1		|signed byte
-	|short	|2	|2		|signed twobyte
-	|int	|4	|4		|signed fourbyte
-	|long	|8	|8		|signed eightbyte
-	|\_\_int128	|16	|16	|singed sixteenbyte
Pointer	|any-type *	|8	|8	|unsigned eightbyte
	|any-type (*)()	|8	|8	|unsigned eightbyte
Floating-ponint	|float	|4	|4	|single(IEEE-754)
-	|double	|8	|8	|double(IEEE-754)
-	|long double	|8	|8	|80-bit extended(IEEE-754)
-	|\_\_float128	|16	|16	|128-bit extended(IEE0754)
Decimal-floating-point	|\_Decimal32	|4	|4	|32bit BID
Decimal-floating-point	|\_Decimal64	|8	|8	|64bit BID
Decimal-floating-point	|\_Decimal128	|16	|16	|128bit BID

Packed	|\_\_m64	|8	|8	|MMX and 3DNow!
Packed	|\_\_m128	|16	|16	|SSE and SSE-2
Packed	|\_\_m256	|32	|32	|AVX

###Aggregates and Unions
###Bit-Fields

##3.2 函数调用序列

这节描述标准的函数调用方法，包括stack frame layout 和寄存器使用，参数传递等等.
标准函数调用序列只适用于全局函数，对于局部函数来说，需要使用别的约定，但是如果能够使用的话，尽量用标准方法调用函数。

###3.2.1 寄存器和栈

AMD64架构的CPU提供16个通用寄存器。除此之外还提供16个SSE寄存器，每个128个bit宽。还有8个浮点指针寄存器，每个80个bits宽。
Intel AVX(Advanced Vector Extensions)提供 16个 256-bit 宽的AVX寄存器(%ymm0 - %ymm15). 低128-bits是128-bit SSE寄存器(%xmm0 - %xmm15)的别名。

下面的部分讨论每个寄存器的用法。寄存器%rbp和%rbx和%r12到%r16*属于*调用函数，被调用函数需要去维护这些值.换句话说，这些寄存器都是要存在栈上的。

###3.2.2 栈

除了寄存器，每个函数都在运行时的栈上有一部分作为自己的栈。栈从高地址开始，随着栈顶指针的减小而增长。3.3展示了栈的组成。

	Figure 3.3 Stack Frame with Base Pointer

Position	|Contents	|Frame
-		|-		|-
8n+16(%rbp)	|第n个8字节参数	|Previous
		|...		|
16(%rbp)	|第0个8字节参数	|
8(%rbp)		|返回地址	|Current
0(%rbp)		|previous %rbp	|
-8(%rbp)	|不确定的变量	|
		|...		|
0(%rsp)		|		|
-128(%rsp)	|red zone	|

最后一个变量要是16字节对齐，也就是(%rsp+8)是16的倍数

%rsp 后面的128-byte区域是保留的，不应该被信号或者中断处理给修改。因此函数可以使用这个地方作为临时的不会被其他函数获取的数据存储域.
//TODO:这块叫红区，但是不是很明白以后解释.

###3.2.3 参数传递

参数有传到寄存器里的也有压到栈里面的.

####Definitions

####INTEGER
适合通用寄存器

####SSE
适合向量寄存器

####SSEUP	

####X87,X87UP

包含通过X87 FPU 返回的类型

####COMPLEX\_X87

包含通过X87 FPU 返回的类型

####NO\_CLASS
算法中用来初始化，一般是填充或者清空结构体或者联合体.

####MEMORY
这类是通过内存中的栈来传递和返回的

####分类
每个参数的大小都会向上取整到eightbytes.
```
• Arguments of types (signed and unsigned) _Bool, char, short, int,
long, long long, and pointers are in the INTEGER class.
• Arguments of types float, double, _Decimal32, _Decimal64 and
__m64 are in class SSE.
• Arguments of types __float128, _Decimal128 and __m128 are split
into two halves. The least significant ones belong to class SSE, the most
significant one to class SSEUP.
• Arguments of type __m256 are split into four eightbyte chunks. The least
significant one belongs to class SSE and all the others to class SSEUP.
• The 64-bit mantissa of arguments of type long double belongs to class
X87, the 16-bit exponent plus 6 bytes of padding belongs to class X87UP.
• Arguments of type __int128 offer the same operations as INTEGERs,
yet they do not fit into one general purpose register but require two registers.
For classification purposes __int128 is treated as if it were implemented
as:
typedef struct {
	long low, high;
} __int128;
with the exception that arguments of type __int128 that are stored in
memory must be aligned on a 16-byte boundary.
• Arguments of complex T where T is one of the types float or double
are treated as if they are implemented as:
struct complexT {
	T real;
	T imag;
};
• A variable of type complex long double is classified as type COM-
PLEX_X87.

```

结构体和数组以及联合体:下面一大堆暂时看不懂...
1.   大小超过eightbyte或者是一段不对齐的域的话，就分为MEMORY类型.
2.   If a C++ object has either a non-trivial copy constructor or a non-trivial
destructor , it is passed by invisible reference (the object is replaced in the
parameter list by a pointer that has class INTEGER) .
3.   If the size of the aggregate exceeds a single eightbyte, each is classified
separately. Each eightbyte gets initialized to class NO\_CLASS.
4.   Each field of an object is classified recursively so that always two fields are
considered. The resulting class is calculated according to the classes of the
fields in the eightbyte:

	*  (a) If both classes are equal, this is the resulting class.
	*  (b) If one of the classes is NO\_CLASS, the resulting class is the other class.
	*  (c) If one of the classes is MEMORY, the result is the MEMORY class.
	*  (d) If one of the classes is INTEGER, the result is the INTEGER.
	*  (e) If one of the classes is X87, X87UP, COMPLEX\_X87 class, MEMORY is used as class.
	*  (f) Otherwise class SSE is used.

5.  Then a post merger cleanup is done:
	*  (a) If one of the classes is MEMORY, the whole argument is passed in	memory.
	*  (b) If X87UP is not preceded by X87, the whole argument is passed in	memory.
	*  (c) If the size of the aggregate exceeds two eightbytes and the first eightbyte isn’t SSE or any other eightbyte isn’t SSEUP, the whole argument is passed in memory.
	*  (d) If SSEUP is not preceded by SSE or SSEUP, it is converted to SSE.

####Passing 当参数被分类侯，寄存器(从左到右)的分配:

1.  如果是MEMORY类的，就传递到栈上.
2.  如果是INTEGER的话，%rdi，%rsi，%rdx，%rcx，%r8和%r9用来传递参数.
3.  如果是SSE，%xmm1到%xmm7用来传递参数.
4.  如果是SSEUP那么传到下一个合适的最近被使用的向量寄存器8字节部分,
5.  如果是X87,X87UP或者是COMPLEX\_X87,就传入内存.

//TODO:更多补充，暂时看不懂

Figure 3.4: Register Usage

![3.4](../imgs/figure_3.4.png)

####返回值 返回值根据下面的算法进行

1. 用分类算法讲返回值分类 
2. If the type has class MEMORY, then the caller provides space for the return
value and passes the address of this storage in %rdi as if it were the first
argument to the function. In effect, this address becomes a “hidden” first ar-
gument. This storage must not overlap any data visible to the callee through
other names than this argument.
On return %rax will contain the address that has been passed in by the
caller in %rdi.
3. If the class is INTEGER, the next available register of the sequence %rax,
%rdx is used.
4. If the class is SSE, the next available vector register of the sequence %xmm0,
%xmm1 is used.
5. If the class is SSEUP, the eightbyte is returned in the next available eightbyte
chunk of the last used vector register.
6. If the class is X87, the value is returned on the X87 stack in %st0 as 80-bit
x87 number.
7. If the class is X87UP, the value is returned together with the previous X87
value in %st0.
8. If the class is COMPLEX\_X87, the real part of the value is returned in
%st0 and the imaginary part in %st1.
//TODO:示例
```
typedef struct {
	int a, b;
	double d;
} structparm;
structparm s;
int e, f, g, h, i, j, k;
long double ld;
double m, n;
__m256 y;
extern void func (int e, int f,
	structparm s, int g, int h,
	long double ld, double m,
	__m256 y,
	double n, int i, int j, int k);
func (e, f, s, g, h, ld, m, y, n, i, j, k);

```
![3.6](../imgs/figure_3.6.png)

##3.3 操作系统接口

###3.3.1 异常接口
AMD64更换模式来处理异常，这可以是同步的也可以是非同步的。
同步的异常可以由指令执行引起，能够被进程显示的触发。
异常被分来faults,traps,aborts三种。

####硬件异常类型

The operating system defines the correspondence between hardware exceptions
and the signals specified by signal (BA\_OS) as shown in table 3.1. Contrary
to the i386 architecture, the AMD64 does not define any instructions that generate
a bounds check fault in long mode.

###3.3.2 虚拟地址空间
尽管AMD64的架构使用64-bit的指针，但是实现的时候只被用于处理48-bit的地址。因此只能使用 0x00000000 00000000 到 0x00007fff ffffffff的地址空间。
进程有三个段text，data和stack。共享库会添加其他的段或者进程动态添加段。

###3.3.3 页大小
系统允许页大小的是2的幂，在4KB到64KB之间.

###3.3.4 虚拟地址分配
//TODO:以后再解释

##3.4 进程初始化

###3.4.1 初始化栈和寄存器

####特殊的寄存器
//中间跳过很多

##3.5 代码示例
这节都是一些代码的示例，来演示如何调用函数，接触静态对象和交换程序控制权等。不像之前的材料，这段材料不是特别规范。

###3.5.3 结构限制

**Small code model** 被执行的代码段的虚拟地址是在link time才知晓的。

###3.5.5 函数调用

